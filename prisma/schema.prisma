// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int               @id @unique @default(autoincrement())
  stravaId              Int               @unique @map(name: "strava_id")
  firstName             String?           @map(name: "first_name")
  lastName              String?           @map(name: "last_name")
  bio                   String?
  city                  String?
  state                 String?
  country               String?
  sex                   String?
  profileMedium         String?           @map("profile_medium")
  profile               String?           @map(name: "profile_long")
  tokenType             String?           @map(name: "token_type")
  accessToken           String?           @map(name: "access_token")
  accessTokenExpireTime Int               @map(name: "access_token_expire_time")
  refreshToken          String?           @map(name: "refresh_token")
  leagueGroupUsers      LeagueGroupUser[]
  activities            Activity[]
}

model League {
  id           Int           @id @unique @default(autoincrement())
  name         String
  startedAt    DateTime      @default(now()) @map(name: "started_at")
  endAt        DateTime      @default(now()) @map(name: "end_at")
  total        Float
  leagueGroups LeagueGroup[]
}

model LeagueGroup {
  id              Int               @id @unique @default(autoincrement())
  groupName       String            @map(name: "group_name")
  leagueId        Int               @map(name: "league_id")
  league          League            @relation(fields: [leagueId], references: [id])
  leagueGroupUser LeagueGroupUser[]
}

model LeagueGroupUser {
  id            Int         @id @unique @default(autoincrement())
  userId        Int         @map(name: "user_id")
  leagueGroupId Int         @map(name: "league_group_id")
  total         Float       @default(0)
  user          User        @relation(fields: [userId], references: [id])
  leagueGroup   LeagueGroup @relation(fields: [leagueGroupId], references: [id])
}

model Activity {
  id                 Int           @id @unique @default(autoincrement())
  userId             Int           @map(name: "user_id")
  name               String
  distance           Float
  movingTime         Float         @map(name: "moving_time")
  elapsedTime        Int           @map(name: "elapsed_time")
  totalElevationGain Float         @map(name: "total_elevation_gain")
  type               String
  startDate          DateTime      @default(now()) @map(name: "start_date")
  startDateLocal     DateTime      @default(now()) @map(name: "start_date_local")
  visibility         String
  averageSpeed       Float           @map(name: "average_speed")
  maxSpeed           Float           @map(name: "max_speed")
  isValid            Boolean       @default(true) @map(name: "is_valid")
  splitMetrics       SplitMetric[]
  user               User          @relation(fields: [userId], references: [id])
}

model SplitMetric {
  activityId                Int      @map(name: "activity_id")
  split                     Int
  distance                  Float
  elapsedTime               Int      @map(name: "elapsed_time")
  elevationDifference       Float    @map(name: "elevation_difference")
  movingTime                Float    @map(name: "moving_time")
  averageSpeed              Float    @map(name: "average_speed")
  averageGradeAdjustedSpeed Float    @map(name: "average_grade_adjusted_speed")
  paceZone                  Float    @map(name: "pace_zone")
  activity                  Activity @relation(fields: [activityId], references: [id])

  @@unique([activityId, split])
}

model Temp {
  id         Int     @id @unique @default(autoincrement())
  activityId String? @unique @map(name: "activity_id")
  name       String?
  distance   Float?
  movingTime Float?  @map(name: "moving_time")
}
