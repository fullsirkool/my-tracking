// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                      @id @unique @default(autoincrement())
  stravaId               Int                      @unique @map(name: "strava_id")
  googleId               String?                  @unique @map(name: "google_id")
  email                  String?                  @unique @map(name: "email")
  password               String?                  @map(name: "password")
  firstName              String?                  @map(name: "first_name")
  lastName               String?                  @map(name: "last_name")
  sex                    String?
  profile                String?                  @map(name: "profile_long")
  stravaRefreshToken     String?                  @map(name: "strava_refresh_token")
  refreshToken           String?                  @map(name: "refresh_token")
  tokenExpiresAt         String?                  @map(name: "token_expires")
  capcha                 String?                  @default(uuid())
  activities             Activity[]
  challenges             Challenge[]
  challengeUsers         ChallengeUser[]
  dailyActivity          DailyActivity[]
  challengeActivity      ChallengeActivity[]
  challengeDailyActivity ChallengeDailyActivity[]
  point                  Point?

  @@map("user")
}

model Point {
  userId Int  @id @unique @map(name: "user_id")
  points Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("point")
}

model Activity {
  id                 String              @id @unique
  userId             Int                 @map(name: "user_id")
  name               String
  distance           Float
  movingTime         Float               @map(name: "moving_time")
  elapsedTime        Int                 @map(name: "elapsed_time")
  totalElevationGain Float               @map(name: "total_elevation_gain")
  type               String
  startDate          DateTime            @default(now()) @map(name: "start_date")
  startDateLocal     DateTime            @default(now()) @map(name: "start_date_local")
  timezone           String              @default("Asia/Bangkok")
  visibility         String
  averageSpeed       Float               @map(name: "average_speed")
  maxSpeed           Float               @map(name: "max_speed")
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  challengeActivity  ChallengeActivity[]

  @@map("activity")
}

model DailyActivity {
  id             Int      @id @unique @default(autoincrement())
  distance       Float
  movingTime     Float    @map(name: "moving_time")
  elapsedTime    Int      @map(name: "elapsed_time")
  startDateLocal DateTime @default(now()) @map(name: "start_date_local")
  userId         Int      @map(name: "user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("daily_activity")
}

model Admin {
  id           Int         @id @unique @default(autoincrement())
  username     String      @unique
  password     String
  status       AdminStatus @default(INACTIVE)
  refreshToken String?     @map("refresh_token")

  @@map("admin")
}

model Challenge {
  id                     Int                      @id @unique @default(autoincrement())
  title                  String
  startDate              DateTime                 @map("start_date")
  endDate                DateTime                 @map("end_date")
  ownerId                Int                      @map("owner_id")
  code                   String?                  @unique @default(uuid())
  image                  String?
  challengeType          ChallengeType            @default(ONE_VS_MANY) @map("challenge_type")
  status                 ChallengeStatus          @default(PUBLIC)
  owner                  User                     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  challengeGroups        ChallengeGroup[]
  challengeUsers         ChallengeUser[]
  rule                   Rule?
  challengeActivity      ChallengeActivity[]
  challengeDailyActivity ChallengeDailyActivity[]

  @@map("challenge")
}

model Rule {
  id          Int        @id @unique @default(autoincrement())
  title       String?
  target      Float?
  minPace     Float?     @map("min_pace")
  maxPace     Float?     @map("max_pace")
  minDistance Float?     @map("min_distance")
  maxDistance Float?     @map("max_distance")
  challengeId Int        @unique @map("challenge_id")
  challenge   Challenge? @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("rule")
}

model ChallengeGroup {
  id             Int             @id @unique @default(autoincrement())
  title          String?
  code           String?         @unique @default(uuid())
  challengeId    Int             @unique @map("challenge_id")
  challenge      Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeUsers ChallengeUser[]

  @@map("challenge_group")
}

model ChallengeUser {
  id               Int             @id @unique @default(autoincrement())
  userId           Int             @map("user_id")
  challengeId      Int             @map("challenge_id")
  challengeGroupId Int?            @map("challenge_group_id")
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge        Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeGroup   ChallengeGroup? @relation(fields: [challengeGroupId], references: [id], onDelete: Cascade)

  @@map("challenge_user")
}

model ChallengeActivity {
  id          Int       @id @unique @default(autoincrement())
  activityId  String    @map("activity_id")
  userId      Int       @map("user_id")
  challengeId Int       @map("challenge_id")
  isValid     Boolean   @map("is_valid")
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity    Activity  @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("challenge_activity")
}

model ChallengeDailyActivity {
  id             Int       @id @unique @default(autoincrement())
  distance       Float
  movingTime     Float     @map(name: "moving_time")
  elapsedTime    Int       @map(name: "elapsed_time")
  startDateLocal DateTime  @default(now()) @map(name: "start_date_local")
  userId         Int       @map("user_id")
  challengeId    Int       @map("challenge_id")
  challenge      Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("challenge_daily_activity")
}

enum AdminStatus {
  ACTIVE
  INACTIVE
}

enum ChallengeStatus {
  PUBLIC
  PRIVATE
}

enum ChallengeType {
  ONE_VS_MANY
  ONE_VS_ONE
  GROUP_VS_GROUP
}
