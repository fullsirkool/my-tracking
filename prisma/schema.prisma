// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int             @id @unique @default(autoincrement())
  stravaId           Int             @unique @map(name: "strava_id")
  firstName          String?         @map(name: "first_name")
  lastName           String?         @map(name: "last_name")
  bio                String?
  city               String?
  state              String?
  country            String?
  sex                String?
  profileMedium      String?         @map("profile_medium")
  profile            String?         @map(name: "profile_long")
  stravaRefreshToken String?         @map(name: "strava_refresh_token")
  refreshToken       String?         @map(name: "refresh_token")
  tokenExpiresAt     String?         @map(name: "token_expires")
  activities         Activity[]
  challenges            Challenge[]
  challengeGroupUsers        ChallengeGroupUser[]
  dailyActivity      DailyActivity[]

  @@map("user")
}

model Activity {
  id                 String   @id @unique
  userId             Int      @map(name: "user_id")
  name               String
  distance           Float
  movingTime         Float    @map(name: "moving_time")
  elapsedTime        Int      @map(name: "elapsed_time")
  totalElevationGain Float    @map(name: "total_elevation_gain")
  type               String
  startDate          DateTime @default(now()) @map(name: "start_date")
  startDateLocal     DateTime @default(now()) @map(name: "start_date_local")
  visibility         String
  averageSpeed       Float    @map(name: "average_speed")
  maxSpeed           Float    @map(name: "max_speed")
  isValid            Boolean  @default(true) @map(name: "is_valid")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity")
}

model DailyActivity {
  id             Int      @id @unique @default(autoincrement())
  distance       Float
  movingTime     Float    @map(name: "moving_time")
  elapsedTime    Int      @map(name: "elapsed_time")
  startDateLocal DateTime @default(now()) @map(name: "start_date_local")
  userId         Int      @map(name: "user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("daily_activity")
}

model Admin {
  id           Int         @id @unique @default(autoincrement())
  username     String      @unique
  password     String
  status       AdminStatus @default(INACTIVE)
  refreshToken String?     @map("refresh_token")

  @@map("admin")
}

model Challenge {
  id        Int      @id @unique @default(autoincrement())
  title     String
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  ownerId   Int      @map("owner_id")
  user      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  rule      Rule?
  groups    Group[]

  @@map("challenge")
}

model Rule {
  id          Int       @id @unique @default(autoincrement())
  title       String
  minPace     Float     @map("min_pace")
  maxPace     Float     @map("max_pace")
  minDistance Float     @map("min_distance")
  maxDistance Float     @map("max_distance")
  challengeId Int       @unique @map("challenge_id")
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@map("rule")
}

model Group {
  id                  Int                  @id @unique @default(autoincrement())
  title               String?
  totalDistance       Float                @default(0) @map("total_distance")
  totalMovingTime     Float                @default(0) @map("totalMovingTime")
  challengeId         Int                  @unique @map("challenge_id")
  challenge           Challenge            @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeGroupUsers ChallengeGroupUser[]

  @@map("challenge_group")
}

model ChallengeGroupUser {
  id      Int   @id @unique @default(autoincrement())
  groupId Int   @map("group_id")
  userId  Int   @map("user_id")
  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("challenge_group_user")
}

enum AdminStatus {
  ACTIVE
  INACTIVE
}
